import os
import time
from fnmatch import fnmatch

# region file_content
launch_txt = """{{
    "version": "0.2.0",
    "configurations": [
      {{
        "name": "C/C++: g++ build and debug active file",
        "type": "cppdbg",
        "request": "launch",
        "program": "${{workspaceFolder}}/out",
        //"args": ["<","..."],
        {0},
        "stopAtEntry": false,
        "cwd": "${{workspaceFolder}}",
        "environment": [],
        "externalConsole": false,
        "MIMode": "gdb",
        //"miDebuggerPath": "C:\\msys64\\mingw64\\bin\\gdb.exe",
        "miDebuggerPath": "/usr/bin/gdb",
        "setupCommands": [
          {{
            "description": "Enable pretty-printing for gdb",
            "text": "-enable-pretty-printing",
            "ignoreFailures": true
          }}
        ],
        "preLaunchTask": "C/C++: g++ build active file"
      }}
    ]
  }}
  """
launch_file = '.vscode/launch.json'

tasks_txt = """{{
    "version": "2.0.0",
    "tasks": [
        {{
            "type": "shell",
            "label": "C/C++: g++ build active file",
            //"command": "C:\\msys64\\mingw64\\bin\\g++",
            "command": "/usr/bin/g++",
            "args": [
                "-g",
                "{0}",
                "-I", "${{workspaceFolder}}/",
                "-o",
                //"${{workspaceFolder}}\\out.exe"
                "${{workspaceFolder}}/out"
            ],
            "options": {{
                //"cwd": "/usr/bin"
            }},
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "Task generated by Debugger."
        }}
    ]
}}"""


tasks_file = '.vscode/tasks.json'
# endregion

root = os.getcwd()
pattern = "*.cpp"

last = time.time()
file = None

for path, subdirs, files in os.walk(root):
    for name in files:
        if fnmatch(name, pattern):
            diff = time.time() - os.stat(os.path.join(path, name)).st_mtime
            if diff < last:
                last = diff
                file = [path, name]

if file is not None:
    print(os.path.join(file[0], file[1]))
    path = file[0]
    cpp_file = file[1]
    input_file = cpp_file.replace(".cpp", "Input.txt")
    if os.path.exists(os.path.join(path, input_file)):
        launch_txt = launch_txt.format('"args": ["<","{0}"]'.format(os.path.join(path, input_file)))
    else:
        launch_txt = launch_txt.format('')

    with open(launch_file, "w") as text_file:
        text_file.write(launch_txt)

    tasks_txt= tasks_txt.format(os.path.join(path, cpp_file))
    with open(tasks_file, "w") as text_file:
        text_file.write(tasks_txt)
